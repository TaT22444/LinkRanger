rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    // ユーザーがサインインしているかを確認
    function isSignedIn() {
      return request.auth != null;
    }
    
    // ドキュメントの所有者かを確認 (作成時)
    function isCreatingOwner() {
      return request.auth.uid == request.resource.data.userId;
    }
    
    // ドキュメントの所有者かを確認 (更新・削除時)
    function isUpdatingOwner() {
      return request.auth.uid == resource.data.userId;
    }
    
    // ドキュメントが存在するかチェック
    function documentExists() {
      return resource != null;
    }

    // 🔒 データバリデーション: 文字列長制限
    function isValidStringLength(value, maxLength) {
      return value is string && value.size() <= maxLength;
    }

    // 🔒 データバリデーション: URL形式チェック
    function isValidUrl(url) {
      return url is string && 
             url.size() > 0 && 
             url.size() <= 2000 && 
             (url.matches('https://.*') || url.matches('http://.*'));
    }

    // 🔒 管理者権限チェック
    function isAdmin() {
      return request.auth != null && 
             request.auth.token.email in [
               'tatsu0823takasago@icloud.com'
             ];
    }

    // 🔒 データバリデーション: リンクデータの検証
    function isValidLinkData(data) {
      return data.keys().hasAll(['userId', 'url', 'title']) &&
             isValidStringLength(data.title, 500) &&
             isValidUrl(data.url) &&
             data.userId is string;
    }

    // 🔒 データバリデーション: タグデータの検証
    function isValidTagData(data) {
      return data.keys().hasAll(['userId', 'name']) &&
             isValidStringLength(data.name, 50) &&
             data.userId is string;
    }

    // --- User Profiles ---
    // ユーザーは自身のプロフィール情報のみアクセス可能
    match /users/{userId} {
      allow read, delete: if isSignedIn() && request.auth.uid == userId;
      allow create: if isSignedIn() && request.auth.uid == userId;

      // 🔒 更新ルール: 権限チェック + データバリデーション
      allow update: if isSignedIn() && 
                       request.auth.uid == userId &&
                       // 重要フィールドの改ざん防止
                       (!('uid' in request.resource.data) || request.resource.data.uid == userId) &&
                       (!('email' in request.resource.data) || request.resource.data.email == request.auth.token.email);
    }

    // --- User-Owned Content (Links, Tags, Analyses) ---
    // ユーザーは自身のコンテンツのみ作成・読み取り・更新・削除が可能
    match /links/{linkId} {
      allow read, delete: if isSignedIn() && documentExists() && (isUpdatingOwner() || isAdmin());
      allow update: if isSignedIn() && documentExists() && (isUpdatingOwner() || isAdmin()) &&
                       // 🔒 userId改ざん防止
                       request.resource.data.userId == resource.data.userId;
      allow create: if isSignedIn() && isCreatingOwner() && 
                       // 🔒 データバリデーション
                       isValidLinkData(request.resource.data);
    }

    match /tags/{tagId} {
      allow read, delete: if isSignedIn() && documentExists() && (isUpdatingOwner() || isAdmin());
      allow update: if isSignedIn() && documentExists() && (isUpdatingOwner() || isAdmin()) &&
                       // 🔒 userId改ざん防止
                       request.resource.data.userId == resource.data.userId;
      allow create: if isSignedIn() && isCreatingOwner() && 
                       // 🔒 データバリデーション
                       isValidTagData(request.resource.data);
    }

    match /folders/{folderId} {
      allow read, delete: if isSignedIn() && documentExists() && (isUpdatingOwner() || isAdmin());
      allow update: if isSignedIn() && documentExists() && (isUpdatingOwner() || isAdmin()) &&
                       // 🔒 userId改ざん防止
                       request.resource.data.userId == resource.data.userId;
      allow create: if isSignedIn() && isCreatingOwner();
    }

    match /searchHistory/{historyId} {
      allow read, delete: if isSignedIn() && documentExists() && (isUpdatingOwner() || isAdmin());
      allow update: if isSignedIn() && documentExists() && (isUpdatingOwner() || isAdmin()) &&
                       // 🔒 userId改ざん防止
                       request.resource.data.userId == resource.data.userId;
      allow create: if isSignedIn() && isCreatingOwner();
    }

    match /appSettings/{settingId} {
      allow read: if isSignedIn() && documentExists() && (isUpdatingOwner() || isAdmin());
      allow delete: if isSignedIn() && documentExists() && (isUpdatingOwner() || isAdmin());
      allow update: if isSignedIn() && documentExists() && (isUpdatingOwner() || isAdmin()) &&
                       // 🔒 userId改ざん防止
                       request.resource.data.userId == resource.data.userId;
      allow create: if isSignedIn() && isCreatingOwner();
    }

    match /savedAnalyses/{analysisId} {
      allow read, delete: if isSignedIn() && documentExists() && (isUpdatingOwner() || isAdmin());
      allow update: if isSignedIn() && documentExists() && (isUpdatingOwner() || isAdmin()) &&
                       // 🔒 userId改ざん防止
                       request.resource.data.userId == resource.data.userId;
      allow create: if isSignedIn() && isCreatingOwner();
    }

    // --- Server-Managed Collections ---
    // AI使用量データ。サーバーからの書き込みのみ許可。
    match /aiUsage/{usageId} {
      // 自分の使用量のみ読み取り可能
      allow read: if isSignedIn() && documentExists() && isUpdatingOwner();
      allow write: if false; // クライアントからの書き込みは全面禁止
    }
    
    // AI使用量の月次サマリー。サーバーからの書き込みのみ許可。
    match /aiUsageSummary/{summaryId} {
      // 自分のサマリーのみ読み取り可能 (summaryIdは "userId_YYYY-MM" 形式)
      allow read: if isSignedIn() && summaryId.matches(request.auth.uid + '_.*');
      allow write: if false; // クライアントからの書き込みは全面禁止
    }

    // タグのキャッシュ。読み取り専用。
    match /tagCache/{cacheId} {
      // 認証済みユーザーは誰でも読み取り可能
      allow read: if isSignedIn();
      allow write: if false; // クライアントからの書き込みは全面禁止
    }

    // --- お知らせ機能 ---
    // お知らせ。すべての認証済みユーザーが読み取り可能。
    match /announcements/{announcementId} {
      // 認証済みユーザーは誰でも読み取り可能
      allow read: if isSignedIn();
      // 管理者のみ書き込み可能
      allow create, update: if isAdmin();
      allow delete: if isAdmin();
    }

    // お知らせ既読状態。ユーザーは自身の既読情報のみアクセス可能。
    match /userAnnouncementReads/{readId} {
      allow read, delete: if isSignedIn() && documentExists() && isUpdatingOwner();
      allow update: if isSignedIn() && documentExists() && isUpdatingOwner() &&
                       // 🔒 userId改ざん防止
                       request.resource.data.userId == resource.data.userId;
      allow create: if isSignedIn() && isCreatingOwner();
    }
  }
}