export const getTaggingPrompt = (
  title: string,
  description: string,
  content: string,
  maxTags: number,
  keyTerms: string[]
): string => {
  const keyTermsString = keyTerms.join(", ");

  return `
あなたは、コンテンツの本質を見抜く専門の分析家です。
あなたの仕事は、提供された情報（特にタイトル）を深く分析し、そのコンテンツの「中心的な概念」と「主要なテーマ」を的確に表すタグを生成することです。

### タグ生成の基本方針
- **表面的なキーワード抽出を超えよ**: タイトルの単語をただ抜き出すのではなく、そのタイトルが何を伝えようとしているのか、その**本質的な意味**を理解してください。
- **中心概念（コア・コンセプト）を特定せよ**: 記事が最も伝えたいことは何かを見抜きます。それは「デザインシステム」のような複合語かもしれませんし、「デザイン」というより広い概念かもしれません。文脈から最も重要だと判断したものを、最優先のタグとしてください。
- **複合語と単体の語の関係性を理解せよ**:
  - 「デザインシステム」が中心概念の場合、それは非常に重要なタグです。
  - 同時に、その構成要素である「デザイン」も、その記事の文脈において重要な概念であれば、同様に優先度の高いタグとして扱ってください。
  - どちらを優先するか、あるいは両方を採用するかは、あなたがタイトルの文脈を分析して決定してください。

### タグ生成の思考プロセス例
- **タイトル: 「デザインシステムとは？作り方やガイドラインを解説」**
  - *思考: この記事の中心概念は明らかに「デザインシステム」だ。しかし、「デザイン」という大きな枠組みや、「ガイドライン」という関連概念も重要。アクションとしては「作り方」が示されている。*
  - *タグ候補: デザインシステム, デザイン, デザインガイドライン, 作り方, 解説*

- **タイトル: 「ラーメン二郎のすべて！店舗情報から注文方法まで解説」**
  - *思考: 主題は「ラーメン二郎」という特定の固有名詞。これは分割すべきではない。広義のカテゴリとして「ラーメン」も有効。記事の具体的な内容は「店舗情報」と「注文方法」だ。*
  - *タグ候補: ラーメン二郎, ラーメン, 店舗情報, 注文方法*

- **タイトル: 「A Deep Dive into the Model Context Protocol (MCP)」**
  - *思考: 「Model Context Protocol」という専門用語が中心。略語である「MCP」も同じくらい重要だ。これらは分割できない一つの概念として扱うべきだ。*
  - *タグ候補: Model Context Protocol, MCP, プロトコル, 技術解説*

### 避けるべきタグ
- 「ランキング」「おすすめ」「最新版」「記事」「紹介」「について」などの本質的でない装飾的語句。
- 文脈から見て重要度の低い一般的な単語（例：「方法」「情報」「内容」）。

### 事前抽出されたキーワード候補 (あくまで参考としてください)
${keyTermsString}

### 入力情報
【タイトル】: ${title}
【説明】: ${description}
【本文（抜粋）】: ${content.slice(0, 1000)}

### 出力形式
カンマ区切りの文字列のみ（例: デザインシステム,デザイン,デザインガイドライン,作り方）
`.trim();
};

export const getMainEntitiesPrompt = (
  title: string,
  description: string,
  content: string
): string => {
  return `
あなたはWebページの内容を分析し、最も重要な固有名詞（サービス名・商品名・ブランド名・地名など）を1つまたは複数抽出してください。
- タイトル・説明・本文を参考にしてください。
- その記事やページで“主に扱われている”固有名詞のみを抽出してください。
- 抽出した固有名詞はカンマ区切りで出力してください。
- 余計な説明やテキストは不要です。

【タイトル】: ${title}
【説明】: ${description}
【本文（抜粋）】: ${content.slice(0, 1500)}
`.trim();
};
