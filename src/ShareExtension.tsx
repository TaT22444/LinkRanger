import React, { useState, useEffect } from 'react';
import {
  View,
  Text,
  StyleSheet,
  ActivityIndicator,
  TouchableOpacity,
  Linking,
} from 'react-native';
import { Feather } from '@expo/vector-icons';
import { close, InitialProps } from 'expo-share-extension';
import { getFunctions, httpsCallable } from 'firebase/functions';
import { getAuth, onAuthStateChanged, User } from 'firebase/auth';
import { initializeApp, getApps, FirebaseApp } from 'firebase/app';

// ===================================================================
//
// Firebase„ÅÆÂàùÊúüÂåñÔºà‰∏ÄÂ∫¶„Å†„ÅëÂÆüË°å„Åï„Çå„Çã„Çà„ÅÜ„Å´‰øùË®ºÔºâ
//
// ===================================================================
let firebaseApp: FirebaseApp;
if (getApps().length === 0) {
  const firebaseConfig = {
    apiKey: process.env.EXPO_PUBLIC_FIREBASE_API_KEY,
    authDomain: process.env.EXPO_PUBLIC_FIREBASE_AUTH_DOMAIN,
    projectId: process.env.EXPO_PUBLIC_FIREBASE_PROJECT_ID,
    storageBucket: process.env.EXPO_PUBLIC_FIREBASE_STORAGE_BUCKET,
    messagingSenderId: process.env.EXPO_PUBLIC_FIREBASE_MESSAGING_SENDER_ID,
    appId: process.env.EXPO_PUBLIC_FIREBASE_APP_ID,
  };
  firebaseApp = initializeApp(firebaseConfig);
} else {
  firebaseApp = getApps()[0];
}

const functions = getFunctions(firebaseApp);
const auth = getAuth(firebaseApp);

// ===================================================================
//
// Share Extension Êú¨‰Ωì
//
// ===================================================================

// ‚úÖ ‰øÆÊ≠£ÁÇπÔºö„É©„Ç§„Éñ„É©„É™„Åã„ÇâÊ∏°„Åï„Çå„Çãprops (InitialProps) „ÇíÁõ¥Êé•Âèó„ÅëÂèñ„Çã„Çà„ÅÜ„Å´‰øÆÊ≠£
const ShareExtension: React.FC<InitialProps> = (initialProps) => {
  const [status, setStatus] = useState<'loading' | 'success' | 'error' | 'auth_required'>('loading');
  const [message, setMessage] = useState('„É™„É≥„ÇØ„ÇíÂá¶ÁêÜ„Åó„Å¶„ÅÑ„Åæ„Åô...');
  const [currentUser, setCurrentUser] = useState<User | null>(null);

  useEffect(() => {
    // 1. Ë™çË®ºÁä∂ÊÖã„ÇíÁ¢∫Ë™ç
    const unsubscribe = onAuthStateChanged(auth, (user) => {
      setCurrentUser(user);
      if (!user) {
        setStatus('auth_required');
        setMessage('„Åì„ÅÆÊ©üËÉΩ„ÇíÂà©Áî®„Åô„Çã„Å´„ÅØ„ÄÅWink„Å∏„ÅÆ„É≠„Ç∞„Ç§„É≥„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ');
      }
    });
    return () => unsubscribe();
  }, []);

  useEffect(() => {
    // 2. Ë™çË®º„ÅåÂÆå‰∫Ü„Åó„ÄÅÂÖ±Êúâ„Éá„Éº„Çø(initialProps)„ÅåÂ≠òÂú®„Åô„ÇãÂ†¥Âêà„Å´Âá¶ÁêÜ„ÇíÈñãÂßã
    if (currentUser && initialProps) {
      processSharedContent(initialProps);
    }
  }, [currentUser, initialProps]);

  // ÂÖ±Êúâ„Åï„Çå„Åü„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÂá¶ÁêÜ„Åô„Çã„É°„Ç§„É≥„É≠„Ç∏„ÉÉ„ÇØ
  const processSharedContent = async (data: InitialProps) => {
    try {
      let sharedUrl: string | undefined;

      // 3. ÂÖ±Êúâ„Åï„Çå„Åü„Éá„Éº„Çø„Åã„ÇâURL„ÇíÊäΩÂá∫
      // üî¥ ‰ª•Ââç„ÅÆÈñìÈÅï„ÅÑÔºö `data.urls` „Åß„ÅØ„Å™„Åè `data.url` „ÅåÊ≠£„Åó„ÅÑ
      if (data.url) {
        sharedUrl = data.url;
      } else if (data.text) {
        const urlRegex = /(https?:\/\/[^\s]+)/g;
        const urlMatch = data.text.match(urlRegex);
        if (urlMatch && urlMatch.length > 0) {
          sharedUrl = urlMatch[0];
        }
      }

      if (!sharedUrl) {
        throw new Error('ÂÖ±ÊúâÂèØËÉΩ„Å™URL„ÅåË¶ã„Å§„Åã„Çä„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ');
      }

      // 4. „Éê„ÉÉ„ÇØ„Ç®„É≥„Éâ„ÅÆFirebase Function„ÇíÂëº„Å≥Âá∫„Åô
      const saveSharedLink = httpsCallable(functions, 'saveSharedLink');
      await saveSharedLink({ url: sharedUrl, title: 'ÂÖ±Êúâ„É™„É≥„ÇØ' });

      setStatus('success');
      setMessage('„É™„É≥„ÇØ„Çí‰øùÂ≠ò„Åó„Åæ„Åó„ÅüÔºÅ\nAI„ÅåËá™Âãï„Åß„Çø„Ç∞‰ªò„Åë„Å®ÂàÜÊûê„Çí„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ');

      // 5. ÊàêÂäü„Åó„Åü„Çâ2ÁßíÂæå„Å´Ëá™Âãï„ÅßÈñâ„Åò„Çã
      setTimeout(() => {
        close();
      }, 2000);

    } catch (error: any) {
      setStatus('error');
      setMessage(error.message || '„É™„É≥„ÇØ„ÅÆ‰øùÂ≠ò‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü„ÄÇ');
    }
  };

  // „É°„Ç§„É≥„Ç¢„Éó„É™„ÇíÈñã„ÅÑ„Å¶„É≠„Ç∞„Ç§„É≥„Çí‰øÉ„Åô
  const openMainApp = () => {
    Linking.openURL('wink://'); // „ÅÇ„Å™„Åü„ÅÆ„Ç¢„Éó„É™„ÅÆURL„Çπ„Ç≠„Éº„É†
    close();
  };

  // UI„ÅÆÊèèÁîªÈÉ®ÂàÜ
  const renderContent = () => {
    switch (status) {
      case 'loading':
        return (
          <View style={styles.content}>
            <ActivityIndicator size="large" color="#8A2BE2" />
            <Text style={styles.message}>{message}</Text>
          </View>
        );

      case 'success':
        return (
          <View style={styles.content}>
            <Feather name="check-circle" size={48} color="#4CAF50" />
            <Text style={[styles.message, { color: '#4CAF50', fontWeight: '500' }]}>{message}</Text>
            <TouchableOpacity style={styles.button} onPress={close}>
              <Text style={styles.buttonText}>Èñâ„Åò„Çã</Text>
            </TouchableOpacity>
          </View>
        );

      case 'error':
        return (
          <View style={styles.content}>
            <Feather name="alert-circle" size={48} color="#F44336" />
            <Text style={[styles.message, { color: '#F44336' }]}>{message}</Text>
            <TouchableOpacity style={styles.button} onPress={() => processSharedContent(initialProps)}>
              <Text style={styles.buttonText}>ÂÜçË©¶Ë°å</Text>
            </TouchableOpacity>
          </View>
        );

      case 'auth_required':
        return (
          <View style={styles.content}>
            <Feather name="user-x" size={48} color="#FF9800" />
            <Text style={[styles.message, { color: '#FF9800' }]}>{message}</Text>
            <TouchableOpacity style={styles.button} onPress={openMainApp}>
              <Text style={styles.buttonText}>„Ç¢„Éó„É™„ÇíÈñã„ÅÑ„Å¶„É≠„Ç∞„Ç§„É≥</Text>
            </TouchableOpacity>
          </View>
        );
    }
  };

  return (
    <View style={styles.container}>
      <View style={styles.header}>
        <Feather name="link" size={20} color="#333" />
        <Text style={styles.headerTitle}>Wink„Å´‰øùÂ≠ò</Text>
      </View>
      {renderContent()}
    </View>
  );
};

// ===================================================================
//
// „Çπ„Çø„Ç§„É´„Ç∑„Éº„Éà
//
// ===================================================================
const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#F7F7F7',
  },
  header: {
    flexDirection: 'row',
    alignItems: 'center',
    paddingHorizontal: 20,
    paddingVertical: 16,
    borderBottomWidth: 1,
    borderBottomColor: '#E5E5E5',
    backgroundColor: '#FFFFFF',
  },
  headerTitle: {
    fontSize: 17,
    fontWeight: '600',
    color: '#333',
    marginLeft: 10,
  },
  content: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
    padding: 30,
  },
  message: {
    fontSize: 16,
    color: '#666',
    textAlign: 'center',
    marginTop: 20,
    lineHeight: 24,
  },
  button: {
    marginTop: 24,
    backgroundColor: '#8A2BE2',
    paddingHorizontal: 32,
    paddingVertical: 12,
    borderRadius: 8,
  },
  buttonText: {
    color: '#FFFFFF',
    fontSize: 16,
    fontWeight: '600',
  },
});

export default ShareExtension;
