// GENERATED BY app.shared-inbox.plugin.js (v2-logging-safe-resolve)
#import <Foundation/Foundation.h>
#import <React/RCTBridgeModule.h>

@interface SharedInbox : NSObject <RCTBridgeModule>
@end

@implementation SharedInbox
RCT_EXPORT_MODULE();

static NSString *const kInboxKey = @"SHARED_INBOX_ITEMS";

RCT_EXPORT_METHOD(save:(NSString *)groupId
                  item:(NSDictionary *)item
              resolver:(RCTPromiseResolveBlock)resolve
              rejecter:(RCTPromiseRejectBlock)reject)
{
  NSLog(@"[SharedInbox native] save group=%@ item=%@", groupId, item);
  if (!groupId || groupId.length == 0) { reject(@"no_group", @"Invalid app group", nil); return; }
  NSUserDefaults *ud = [[NSUserDefaults alloc] initWithSuiteName:groupId];
  if (!ud) { reject(@"no_group", @"Invalid app group", nil); return; }

  @try {
    NSMutableArray *arr = [NSMutableArray arrayWithArray:[ud arrayForKey:kInboxKey] ?: @[]];
    NSMutableDictionary *mut = [item mutableCopy];
    if (!mut[@"ts"]) {
      long long ms = (long long)([[NSDate date] timeIntervalSince1970] * 1000.0);
      mut[@"ts"] = @(ms);
    }
    [arr addObject:mut];
    [ud setObject:arr forKey:kInboxKey];
    BOOL ok = [ud synchronize];
    NSLog(@"[SharedInbox native] saved ok=%d currentCount=%lu", ok, (unsigned long)arr.count);
    resolve(@(ok));
  } @catch (NSException *ex) {
    NSLog(@"[SharedInbox native] EXCEPTION %@", ex);
    reject(@"save_exception", ex.reason, nil);
  }
}

RCT_EXPORT_METHOD(readAndClear:(NSString *)groupId
              resolver:(RCTPromiseResolveBlock)resolve
              rejecter:(RCTPromiseRejectBlock)reject)
{
  NSLog(@"[SharedInbox native] readAndClear group=%@", groupId);
  if (!groupId || groupId.length == 0) { reject(@"no_group", @"Invalid app group", nil); return; }
  NSUserDefaults *ud = [[NSUserDefaults alloc] initWithSuiteName:groupId];
  if (!ud) { reject(@"no_group", @"Invalid app group", nil); return; }

  @try {
    NSArray *arr = [ud arrayForKey:kInboxKey] ?: @[];
    [ud setObject:@[] forKey:kInboxKey];
    BOOL ok = [ud synchronize];
    NSLog(@"[SharedInbox native] readAndClear done ok=%d returned=%lu", ok, (unsigned long)arr.count);
    resolve(arr);
  } @catch (NSException *ex) {
    NSLog(@"[SharedInbox native] EXCEPTION %@", ex);
    reject(@"read_exception", ex.reason, nil);
  }
}
@end
